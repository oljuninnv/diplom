<?php

namespace App\Actions;

use App\Enums\CallEnum;
use App\Enums\TaskStatusEnum;
use App\Models\Application;
use App\Models\TaskStatus;
use App\Models\Task;
use App\Models\User;
use App\Enums\ApplicationStatusEnum;
use App\Models\Call;
use App\Mail\ApplicationApprovedMail;
use App\Mail\ApplicationRejectedMail;
use App\Mail\ApplicationUnderConsideration;
use App\Mail\UserAddedMail;
use App\Mail\CallMail;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Facades\Hash;
use Telegram\Bot\Api;
use Illuminate\Support\Facades\Log;

class ApplicationAction
{
    protected $telegram;

    public function __construct()
    {
        $this->telegram = new Api(config('telegram.bot_token'));
    }

    /**
     * –û–¥–æ–±—Ä–∏—Ç—å –∑–∞—è–≤–∫—É
     */
    public function approve(array $update): string
    {
        try {
            $application = Application::findOrFail($update['id']);
            $task = Task::findOrFail($update['task_id']);
            $user = User::with('telegramUser')->findOrFail($application->user_id);
            if (!$user instanceof User) {
                throw new \RuntimeException('User not found');
            }

            $tutor = User::with('telegramUser')->findOrFail($update['tutor']);
            if (!$tutor instanceof User) {
                throw new \RuntimeException('Tutor not found');
            }

            $hrManager = User::with('telegramUser')->findOrFail($update['hr-manager']);
            if (!$hrManager instanceof User) {
                throw new \RuntimeException('HR Manager not found');
            }

            $endDate = null;
            if ($task->deadline) {
                $endDate = now()->addWeeks($task->deadline)->format('d.m.Y');
            }

            $taskStatus = TaskStatus::create([
                'user_id' => $user->id,
                'tutor_id' => $tutor->id,
                'hr_manager_id' => $hrManager->id,
                'task_id' => $task->id,
                'status' => TaskStatusEnum::IN_PROGRESS->value,
                'end_date' => $endDate ? now()->addWeeks($task->deadline)->format('Y-m-d') : null,
            ]);

            $user->update(['password' => Hash::make('password')]);
            $application->update(['status' => ApplicationStatusEnum::APPROVED->value]);

            // –û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            Mail::to($user->email)->send(
                new ApplicationApprovedMail($user, $tutor, $hrManager, $task)
            );

            Mail::send(
                new UserAddedMail($user, $tutor, $hrManager, $task, $endDate)
            );

            // –û—Ç–ø—Ä–∞–≤–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            $this->sendApprovalTelegramNotifications($user, $tutor, $hrManager, $task, $taskStatus);

            return '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–µ–Ω–∞. –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.';

        } catch (\Exception $e) {
            Log::error("Error approving application: " . $e->getMessage());
            return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏.';
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏
     */
    protected function sendApprovalTelegramNotifications($user, $tutor, $hrManager, $task, $taskStatus)
    {
        try {
            $siteUrl = env('WEBHOOK_URL', 'https://your-default-site.com');

            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—É
            if ($user->telegramUser) {
                $text = "üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!\n\n";
                $text .= "üìå –ó–∞–¥–∞–Ω–∏–µ: {$task->title}\n";
                $text .= "üë®‚Äçüè´ –¢—å—é—Ç–æ—Ä: {$tutor->name}\n";
                $text .= "üìÖ –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {$taskStatus->end_date}\n\n";
                $text .= "üîë <b>–í–∞—à–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>\n";
                $text .= "üìß –õ–æ–≥–∏–Ω: {$user->email}\n";
                $text .= "üîí –ü–∞—Ä–æ–ª—å: password\n\n";
                $text .= "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>\n";
                $text .= "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –±–µ—Å–ø–æ–∫–æ–π—Ç–µ —Ç—å—é—Ç–æ—Ä–∞ –∏ HR-–º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ç–æ–ª—å–∫–æ –≤ –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–µ—Ä—å–µ–∑–Ω—ã–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è.\n\n";
                $text .= "–ß–∞—Å—Ç–æ—Ç–∞ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä –≤–∞—à–∏—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π –±—É–¥—É—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.\n\n";
                $text .= "üîó <a href='{$siteUrl}'>–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç</a>";

                $this->telegram->sendMessage([
                    'chat_id' => $user->telegramUser->telegram_id,
                    'text' => $text,
                    'parse_mode' => 'HTML'
                ]);
            }

            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç—å—é—Ç–æ—Ä—É
            if ($tutor->telegramUser) {
                $text = "üì¢ –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–æ–≤—ã–π —Å—Ç—É–¥–µ–Ω—Ç!\n\n";
                $text .= "üë§ –°—Ç—É–¥–µ–Ω—Ç: {$user->name}\n";
                $text .= "üìå –ó–∞–¥–∞–Ω–∏–µ: {$task->title}\n";
                $text .= "üìÖ –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {$taskStatus->end_date}\n\n";
                $text .= "üîó <a href='{$siteUrl}'>–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ø–∏—Å–∫—É —Å—Ç—É–¥–µ–Ω—Ç–æ–≤</a>";

                $this->telegram->sendMessage([
                    'chat_id' => $tutor->telegramUser->telegram_id,
                    'text' => $text,
                    'parse_mode' => 'HTML'
                ]);
            }

            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ HR-–º–µ–Ω–µ–¥–∂–µ—Ä—É
            if ($hrManager->telegramUser) {
                $text = "üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞\n\n";
                $text .= "üë§ –ö–∞–Ω–¥–∏–¥–∞—Ç: {$user->name}\n";
                $text .= "üë®‚Äçüè´ –¢—å—é—Ç–æ—Ä: {$tutor->name}\n";
                $text .= "üìå –ó–∞–¥–∞–Ω–∏–µ: {$task->title}\n";
                $text .= "üìÖ –°—Ä–æ–∫: {$taskStatus->end_date}\n\n";
                $text .= "üîó <a href='{$siteUrl}/hr/applications'>–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞—è–≤–∫–∞–º</a>";

                $this->telegram->sendMessage([
                    'chat_id' => $hrManager->telegramUser->telegram_id,
                    'text' => $text,
                    'parse_mode' => 'HTML'
                ]);
            }

        } catch (\Exception $e) {
            Log::error("Telegram notification error: " . $e->getMessage());
        }
    }

    /**
     * –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É
     */
    public function decline(int $id): string
    {
        try {
            $application = Application::findOrFail($id);
            $application->update([
                'status' => ApplicationStatusEnum::REJECTED->value
            ]);

            $user = User::with('telegramUser')->findOrFail($application->user_id);
            if (!$user instanceof User) {
                throw new \RuntimeException('User not found');
            }


            // –û—Ç–ø—Ä–∞–≤–∫–∞ email
            Mail::to($user->email)->send(
                new ApplicationRejectedMail($user)
            );

            // –û—Ç–ø—Ä–∞–≤–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if ($user->telegramUser) {
                $text = "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n\n";
                $text .= "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å HR –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.";

                $this->telegram->sendMessage([
                    'chat_id' => $user->telegramUser->telegram_id,
                    'text' => $text,
                    'parse_mode' => 'HTML'
                ]);
            }

            return '–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.';

        } catch (\Exception $e) {
            Log::error("Error declining application: " . $e->getMessage());
            return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.';
        }
    }

    public function underConsideration(int $id)
    {
        try {
            $application = Application::findOrFail($id);
            $application->update([
                'status' => ApplicationStatusEnum::UnderConsideration->value
            ]);

            $user = User::with('telegramUser')->findOrFail($application->user_id);
            if (!$user instanceof User) {
                throw new \RuntimeException('User not found');
            }


            // –û—Ç–ø—Ä–∞–≤–∫–∞ email
            Mail::to($user->email)->send(
                new ApplicationUnderConsideration($user)
            );

            // –û—Ç–ø—Ä–∞–≤–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if ($user->telegramUser) {
                $text = "üòä –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –≤–∑—è—Ç–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.\n\n";
                $text .= "–û–∂–∏–¥–∞–π—Ç–µ, –∫–æ–≥–¥–∞ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à hr-–º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è.";

                $this->telegram->sendMessage([
                    'chat_id' => $user->telegramUser->telegram_id,
                    'text' => $text,
                    'parse_mode' => 'HTML'
                ]);
            }

            return '–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.';

        } catch (\Exception $e) {
            Log::error("Error declining application: " . $e->getMessage());
            return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑—è—Ç–∏–∏ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –∑–∞—è–≤–∫–∏.';
        }
    }

    public function assignCall(int $id, array $array): string
    {
        Log::info('–ù–∞—á–∞–ª–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å–æ–∑–≤–æ–Ω–∞', ['application_id' => $id, 'input_data' => $array]);

        try {
            $application = Application::findOrFail($id);
            Log::info('–ó–∞—è–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–∞', ['application' => $application->toArray()]);

            $callData = [
                'type' => CallEnum::PRIMARY->value,
                'meeting_link' => $array['meeting_link'],
                'date' => $array['date'],
                'time' => $array['time'],
                'candidate_id' => $application['user_id'],
                'hr_manager_id' => $array['hr-manager'],
                'tutor_id' => $array['tutor'] ?? null // –î–µ–ª–∞–µ–º tutor_id –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º
            ];

            $call = Call::create($callData);
            Log::info('–°–æ–∑–≤–æ–Ω —Å–æ–∑–¥–∞–Ω', ['call' => $call->toArray()]);

            $hrManager = User::with('telegramUser')->findOrFail($array['hr-manager']);
            $candidate = $application->user()->with('telegramUser')->first();

            $users = [
                'hr_manager' => $hrManager,
                'candidate' => $candidate
            ];

            // –î–æ–±–∞–≤–ª—è–µ–º —Ç—å—é—Ç–æ—Ä–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
            if (!empty($array['tutor'])) {
                $tutor = User::with('telegramUser')->findOrFail($array['tutor']);
                $users['tutor'] = $tutor;
            }

            Log::info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞–π–¥–µ–Ω—ã', array_map(fn($user) => $user->toArray(), $users));

            $emailData = [
                'candidateName' => $candidate->name,
                'tutorName' => $users['tutor']->name ?? null, // –£—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ç—å—é—Ç–æ—Ä–∞
                'hrManagerName' => $hrManager->name,
                'date' => $call->date,
                'time' => $call->time,
                'meetingLink' => $call->meeting_link,
                'companyName' => 'ATWINTA'
            ];

            // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            $this->sendCallNotifications(
                $candidate,
                $users['tutor'] ?? null, // –ü–µ—Ä–µ–¥–∞–µ–º null –µ—Å–ª–∏ —Ç—å—é—Ç–æ—Ä–∞ –Ω–µ—Ç
                $hrManager,
                $call,
                'primary'
            );

            return '–°–æ–∑–≤–æ–Ω –Ω–∞–∑–Ω–∞—á–µ–Ω. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.';

        } catch (\Exception $e) {
            Log::error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Å–æ–∑–≤–æ–Ω–∞', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            throw $e;
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–æ–∑–≤–æ–Ω–µ
     */
    protected function sendCallNotifications($candidate, $tutor, $hrManager, $call, $callType)
    {
        $callTypes = [
            'primary' => '–ü–µ—Ä–≤–∏—á–Ω—ã–π —Å–æ–∑–≤–æ–Ω',
            'technical' => '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–æ–∑–≤–æ–Ω',
            'final' => '–§–∏–Ω–∞–ª—å–Ω—ã–π —Å–æ–∑–≤–æ–Ω'
        ];

        $text = "üìÖ <b>{$callTypes[$callType]}</b>\n\n";
        $text .= "üïí <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {$call->date} –≤ {$call->time}\n";
        $text .= "üîó <b>–°—Å—ã–ª–∫–∞:</b> {$call->meeting_link}\n\n";
        $text .= "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ–ø–∞–∑–¥—ã–≤–∞–π—Ç–µ!";

        // –ö–∞–Ω–¥–∏–¥–∞—Ç—É
        if ($candidate->telegramUser) {
            $this->telegram->sendMessage([
                'chat_id' => $candidate->telegramUser->telegram_id,
                'text' => $text,
                'parse_mode' => 'HTML'
            ]);
        }

        // –¢—å—é—Ç–æ—Ä—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if ($tutor && $tutor->telegramUser) {
            $this->telegram->sendMessage([
                'chat_id' => $tutor->telegramUser->telegram_id,
                'text' => $text,
                'parse_mode' => 'HTML'
            ]);
        }

        // HR-–º–µ–Ω–µ–¥–∂–µ—Ä—É
        if ($hrManager->telegramUser) {
            $this->telegram->sendMessage([
                'chat_id' => $hrManager->telegramUser->telegram_id,
                'text' => $text,
                'parse_mode' => 'HTML'
            ]);
        }

        // –û—Ç–ø—Ä–∞–≤–∫–∞ email
        $emailData = [
            'candidateName' => $candidate->name,
            'tutorName' => $tutor->name ?? null, // –£—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ç—å—é—Ç–æ—Ä–∞
            'hrManagerName' => $hrManager->name,
            'date' => $call->date,
            'time' => $call->time,
            'meetingLink' => $call->meeting_link,
            'companyName' => 'ATWINTA'
        ];

        if ($candidate->email) {
            Mail::to($candidate->email)->send(new CallMail($emailData));
        }
        if ($tutor && $tutor->email) {
            Mail::to($tutor->email)->send(new CallMail($emailData));
        }
        if ($hrManager->email) {
            Mail::to($hrManager->email)->send(new CallMail($emailData));
            // Mail::send(new CallMail($emailData));
        }
    }
}