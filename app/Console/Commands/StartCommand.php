<?php

namespace App\Console\Commands;

use Telegram\Bot\Commands\Command;
use App\Models\User;
use App\Models\TelegramUser;
use Illuminate\Support\Facades\Log;
use Telegram\Bot\Objects\Update;

class StartCommand extends Command
{
    protected string $name = 'start';
    protected string $description = '–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞';

    public function handle()
    {
        /** @var Update $update */
        $update = $this->getUpdate();
        $message = $update->getMessage();
        
        try {
            Log::debug('Incoming /start command', [
                'message' => $message->toArray()
            ]);

            $text = trim($message->getText());
            $from = $message->getFrom();
            $telegramId = $from->getId();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫ —ç—Ç–æ–º—É Telegram –∞–∫–∫–∞—É–Ω—Ç—É
            $telegramUser = TelegramUser::where('telegram_id', $telegramId)->first();
            
            if ($telegramUser) {
                $user = User::where('telegram_user_id', $telegramUser->id)->first();
                if ($user) {
                    return $this->showLinkedAccountInfo($user, $message);
                }
            }

            if (preg_match('/^\/start link_(\d+)_([a-f0-9]+)$/i', $text, $matches)) {
                $this->processAccountLinking((int)$matches[1], $matches[2], $message);
            } else {
                $this->sendWelcomeMessage($message);
            }
            
        } catch (\Throwable $e) {
            Log::error('StartCommand error: '.$e->getMessage(), [
                'exception' => $e,
                'update' => $update->toArray()
            ]);
            
            $this->replyWithMessage([
                'text' => '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                'parse_mode' => 'HTML'
            ]);
        }
    }

    protected function showLinkedAccountInfo(User $user, $message)
    {
        $this->replyWithMessage([
            'text' => "üîí <b>–í–∞—à Telegram –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω</b>\n\n"
                    . "üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–º –ø—Ä–æ—Ñ–∏–ª–µ:\n"
                    . "–ò–º—è: <b>{$user->name}</b>\n"
                    . "Email: <b>{$user->email}</b>\n\n"
                    . "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≤—è–∑–∞—Ç—å –¥—Ä—É–≥–æ–π –∞–∫–∫–∞—É–Ω—Ç, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–≤—è–∂–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞ —Å–∞–π—Ç–µ.",
            'parse_mode' => 'HTML'
        ]);
    }

    protected function processAccountLinking(int $userId, string $hash, $message)
    {
        Log::debug('Processing account linking', [
            'user_id' => $userId,
            'hash' => $hash
        ]);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö—ç—à–∞
        $expectedHash = sha1($userId.env('APP_KEY'));
        if (!hash_equals($expectedHash, $hash)) {
            Log::warning('Invalid hash for user linking', [
                'user_id' => $userId,
                'received_hash' => $hash,
                'expected_hash' => $expectedHash
            ]);
            
            return $this->replyWithMessage([
                'text' => '‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç–µ.',
                'parse_mode' => 'HTML'
            ]);
        }

        // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $user = User::find($userId);
        if (!$user) {
            Log::warning('User not found for linking', ['user_id' => $userId]);
            return $this->replyWithMessage([
                'text' => '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ',
                'parse_mode' => 'HTML'
            ]);
        }

        $from = $message->getFrom();
        $telegramId = $from->getId();

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø—Ä–∏–≤—è–∑–∫—É —ç—Ç–æ–≥–æ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞
        $telegramUser = TelegramUser::where('telegram_id', $telegramId)->first();
        
        if ($telegramUser) {
            $linkedUser = User::where('telegram_user_id', $telegramUser->id)->first();
            if ($linkedUser) {
                Log::warning('Telegram account already linked', [
                    'telegram_id' => $telegramId,
                    'existing_user' => $linkedUser->id,
                    'new_user' => $userId
                ]);
                
                return $this->replyWithMessage([
                    'text' => "‚ùå –≠—Ç–æ—Ç Telegram –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:\n\n"
                            . "üë§ –ò–º—è: <b>{$linkedUser->name}</b>\n"
                            . "üìß Email: <b>{$linkedUser->email}</b>\n\n"
                            . "–î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–≤—è–∂–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞ —Å–∞–π—Ç–µ.",
                    'parse_mode' => 'HTML'
                ]);
            }
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ TelegramUser
        $telegramUser = TelegramUser::updateOrCreate(
            ['telegram_id' => $telegramId],
            [
                'first_name' => $from->getFirstName(),
                'last_name' => $from->getLastName(),
                'username' => $from->getUsername(),
            ]
        );

        // –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        $user->telegram_user_id = $telegramUser->id;
        $user->save();

        Log::info('Successfully linked Telegram account', [
            'user_id' => $userId,
            'telegram_id' => $telegramId
        ]);

        // –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        $this->replyWithMessage([
            'text' => "‚úÖ <b>–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!</b>\n\n"
                    . "üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
                    . "–ò–º—è: <b>{$user->name}</b>\n"
                    . "Email: <b>{$user->email}</b>\n\n"
                    . "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç.",
            'parse_mode' => 'HTML',
            'reply_markup' => json_encode([
                'inline_keyboard' => [
                    [
                        ['text' => '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', 'url' => env('WEBHOOK_URL')]
                    ]
                ]
            ])
        ]);
    }

    protected function sendWelcomeMessage($message)
    {
        $from = $message->getFrom();
        $name = $from->getFirstName() ?? '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        $username = $from->getUsername() ? "@{$from->getUsername()}" : '';
        
        $this->replyWithMessage([
            'text' => "üëã <b>–ü—Ä–∏–≤–µ—Ç, {$name} {$username}!</b>\n\n"
                    . "–Ø ‚Äî –±–æ—Ç –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞ –∫ —Å–∏—Å—Ç–µ–º–µ.\n\n"
                    . "–î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞:\n"
                    . "1. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç–µ\n"
                    . "2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è\n"
                    . "3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–∏–≤—è–∑–∞—Ç—å Telegram'\n\n"
                    . "<i>–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ hr-–º–µ–Ω–µ–¥–∂–µ—Ä—É.</i>",
            'parse_mode' => 'HTML',
            'reply_markup' => json_encode([
                'inline_keyboard' => [
                    [
                        ['text' => '–û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç', 'url' => env('WEBHOOK_URL')]
                    ]
                ]
            ])
        ]);
    }
}